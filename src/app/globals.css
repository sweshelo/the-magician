@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* Card highlight animation */
@keyframes pulse-border {
  0% {
    opacity: 0.4;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
  }
  50% {
    opacity: 1;
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.7);
  }
  100% {
    opacity: 0.4;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
  }
}

/* Field highlight animation that expands from center */
@keyframes field-highlight {
  0% {
    transform: scale(0.7);
    opacity: 0.3;
    border-color: rgba(255, 255, 255, 0.8);
  }
  50% {
    transform: scale(1.1);
    opacity: 0.7;
    border-color: rgba(255, 255, 255, 0.6);
  }
  100% {
    transform: scale(1.2);
    opacity: 0;
    border-color: rgba(255, 255, 255, 0);
  }
}

.animate-pulse-border {
  animation: pulse-border 1.5s infinite ease-in-out;
  animation-delay: 0s; /* Ensure all instances start at the same time */
}

/* Apply a consistent animation to all elements with this class */
:root {
  --animation-sync: 0; /* Global property to force consistent animation state */
}

.animate-field-highlight {
  animation: field-highlight 1.2s infinite ease-in-out;
}

.shadow-glow {
  box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.5);
}

/* Clock rotation animation for UnitIconView */
@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animate-clock-rotate {
  animation: rotate 10s linear infinite;
}

/* 3D flip perspective settings */
.perspective {
  perspective: 1000px;
}

/* Timer text pulse animation for MulliganView */
@keyframes pulse {
  from {
    opacity: 0.8;
    transform: scale(0.98);
  }
  to {
    opacity: 1;
    transform: scale(1.02);
    text-shadow: 0 0 8px rgba(255, 255, 255, 0.9);
  }
}

/* Card flip animation */
@keyframes flip {
  0% {
    transform: rotateY(0deg);
  }
  100% {
    transform: rotateY(180deg);
  }
}

/* Highlight appear animation - starts large and transparent, ends normal size and opaque */
@keyframes highlightAppear {
  0% {
    opacity: 0;
    transform: scale(2);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

/* Square rotation animation */
@keyframes squareRotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Square rotation with scaling animation */
@keyframes squareRotateAndScale {
  0% {
    transform: rotate(0deg) scale(1);
  }
  25% {
    transform: rotate(90deg) scale(1.1);
  }
  50% {
    transform: rotate(180deg) scale(1);
  }
  75% {
    transform: rotate(270deg) scale(0.9);
  }
  100% {
    transform: rotate(360deg) scale(1);
  }
}

.animate-square-rotate {
  animation: squareRotate 3s linear infinite;
}

.animate-rotate-and-scale {
  animation: squareRotateAndScale 3s linear infinite;
}

/* Highlight disappear animation - fades out */
@keyframes highlightDisappear {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.flip {
  animation: flip 0.6s ease-in-out forwards;
}

.flip-reverse {
  animation: flip 0.6s ease-in-out backwards;
}

/* ボタン枠が中心からスケールアップして消えるアニメーション */
@keyframes button-border-wave {
  0% {
    transform: scale(0.7);
    opacity: 1;
    border-width: 3px;
  }
  80% {
    opacity: 0.5;
    border-width: 3px;
  }
  100% {
    transform: scale(1.4);
    opacity: 0;
    border-width: 3px;
  }
}

.animate-button-border-wave {
  position: absolute;
  inset: 0;
  border: 3px solid #fff;
  border-radius: 0.5rem; /* match button */
  pointer-events: none;
  animation: button-border-wave 1.2s infinite;
  z-index: 1;
}

.font_p {
  color: purple;
  background-color: white;
  margin-right: 5px;
}

/* Touch Action Settings for dnd-kit tablet compatibility */

/* Draggable elements - prevent all touch gestures during drag */
.dnd-draggable {
  touch-action: none;
}

/* Droppable zones - allow pan gestures but prevent zoom/tap delays */
.dnd-droppable {
  touch-action: manipulation;
}

/* Scrollable containers - allow vertical scroll only */
.dnd-scrollable {
  touch-action: pan-y;
}

/* Click-only elements - fast clicks, no zoom or long press */
.dnd-clickable {
  touch-action: manipulation;
}

/* Game main container - allow vertical scroll */
.dnd-game-container {
  touch-action: pan-y;
}

/* Field areas - manipulation only for drag and drop */
.dnd-field {
  touch-action: manipulation;
}
